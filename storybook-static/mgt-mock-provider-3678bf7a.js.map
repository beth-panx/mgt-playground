{"version":3,"file":"mgt-mock-provider-3678bf7a.js","sources":["../dist/es6/mock/MockProvider.js","../dist/es6/mock/mgt-mock-provider.js"],"sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Client } from '@microsoft/microsoft-graph-client';\nimport { Graph } from '../Graph';\nimport { IProvider, ProviderState } from '../providers/IProvider';\n/**\n * Mock Provider access token for Microsoft Graph APIs\n *\n * @export\n * @class MockProvider\n * @extends {IProvider}\n */\nexport class MockProvider extends IProvider {\n    constructor(signedIn = false) {\n        super();\n        /**\n         * new instance of mock graph provider\n         *\n         * @memberof MockProvider\n         */\n        this.graph = new MockGraph(this);\n        if (signedIn) {\n            this.setState(ProviderState.SignedIn);\n        }\n        else {\n            this.setState(ProviderState.SignedOut);\n        }\n    }\n    /**\n     * sets Provider state to SignedIn\n     *\n     * @returns {Promise<void>}\n     * @memberof MockProvider\n     */\n    login() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.setState(ProviderState.Loading);\n            yield new Promise(resolve => setTimeout(resolve, 3000));\n            this.setState(ProviderState.SignedIn);\n        });\n    }\n    /**\n     * sets Provider state to signed out\n     *\n     * @returns {Promise<void>}\n     * @memberof MockProvider\n     */\n    logout() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.setState(ProviderState.Loading);\n            yield new Promise(resolve => setTimeout(resolve, 3000));\n            this.setState(ProviderState.SignedOut);\n        });\n    }\n    /**\n     * Promise returning token from graph.microsoft.com\n     *\n     * @returns {Promise<string>}\n     * @memberof MockProvider\n     */\n    getAccessToken() {\n        return Promise.resolve('{token:https://graph.microsoft.com/}');\n    }\n}\n/**\n * MockGraph Instance\n *\n * @export\n * @class MockGraph\n * @extends {Graph}\n */\n// tslint:disable-next-line: max-classes-per-file\nexport class MockGraph extends Graph {\n    constructor(provider) {\n        super(null);\n        this.baseUrl = 'https://proxy.apisandbox.msdn.microsoft.com/svc?url=';\n        this.rootGraphUrl = 'https://graph.microsoft.com/';\n        this.client = Client.initWithMiddleware({\n            authProvider: provider,\n            baseUrl: this.baseUrl + escape(this.rootGraphUrl)\n        });\n    }\n    /**\n     * get events for Calendar\n     *\n     * @param {Date} startDateTime\n     * @param {Date} endDateTime\n     * @returns {Promise<MicrosoftGraph.Event[]>}\n     * @memberof MockGraph\n     */\n    getEvents(startDateTime, endDateTime) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const sdt = `startdatetime=${startDateTime.toISOString()}`;\n            const edt = `enddatetime=${endDateTime.toISOString()}`;\n            const uri = `/me/calendarview?${sdt}&${edt}`;\n            const calendarView = yield this.client.api(escape(uri)).get();\n            return calendarView ? calendarView.value : null;\n        });\n    }\n}\n//# sourceMappingURL=MockProvider.js.map","/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { customElement, LitElement } from 'lit-element';\nimport { Providers } from '../Providers';\nimport { MockProvider } from './MockProvider';\n/**\n * Sets global provider to a mock Provider\n *\n * @export\n * @class MgtMockProvider\n * @extends {LitElement}\n */\nlet MgtMockProvider = class MgtMockProvider extends LitElement {\n    constructor() {\n        super();\n        Providers.globalProvider = new MockProvider(true);\n    }\n};\nMgtMockProvider = __decorate([\n    customElement('mgt-mock-provider')\n], MgtMockProvider);\nexport { MgtMockProvider };\n//# sourceMappingURL=mgt-mock-provider.js.map"],"names":["MockProvider","IProvider","[object Object]","signedIn","graph","MockGraph","this","setState","ProviderState","SignedIn","SignedOut","Loading","Promise","resolve","setTimeout","Graph","provider","baseUrl","rootGraphUrl","client","Client","initWithMiddleware","authProvider","escape","startDateTime","endDateTime","uri","toISOString","calendarView","api","get","value","MgtMockProvider","LitElement","Providers","globalProvider","__decorate","customElement"],"mappings":"wXAkBM,MAAOA,UAAqBC,EAUhCC,kBAAYC,uEADLC,MAAQ,IAAIC,EAAUC,MAGvBH,OACGI,SAASC,EAAcC,eAEvBF,SAASC,EAAcE,WAUnBR,qDACNK,SAASC,EAAcG,eACtB,IAAIC,QAAQC,GAAWC,WAAWD,EAAS,WAC5CN,SAASC,EAAcC,YAQjBP,sDACNK,SAASC,EAAcG,eACtB,IAAIC,QAAQC,GAAWC,WAAWD,EAAS,WAC5CN,SAASC,EAAcE,aAQvBR,wBACEU,QAAQC,QAAQ,yCAYrB,MAAOR,UAAkBU,EAI7Bb,YAAYc,SACJ,WAJAC,QAAU,4DACVC,aAAuB,oCAKxBC,OAASC,EAAOC,mBAAmB,CACtCC,aAAcN,EACdC,QAASX,KAAKW,QAAUM,OAAOjB,KAAKY,gBAW3BhB,UAAUsB,EAAqBC,iDAGpCC,uCAFuBF,EAAcG,kCAChBF,EAAYE,kBAGjCC,QAAqBtB,KAAKa,OAAOU,IAAIN,OAAOG,IAAMI,aACjDF,EAAeA,EAAaG,MAAQ,QCtF/C,IAAaC,EAAb,cAAqCC,EACnC/B,sBAEEgC,EAAUC,eAAiB,IAAInC,GAAa,KAHnCgC,qUAAeI,CAAA,CAD3BC,EAAc,sBACFL"}