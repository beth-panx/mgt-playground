{"version":3,"file":"tasks.stories-1415c075.js","sources":["../dist/es6/components/mgt-tasks/mgt-tasks-css.js","../dist/es6/components/mgt-tasks/task-sources.js","../dist/es6/components/sub-components/mgt-arrow-options/mgt-arrow-options-css.js","../dist/es6/components/sub-components/mgt-arrow-options/mgt-arrow-options.js","../dist/es6/components/sub-components/mgt-dot-options/mgt-dot-options-css.js","../dist/es6/components/sub-components/mgt-dot-options/mgt-dot-options.js","../dist/es6/components/mgt-tasks/mgt-tasks.js","../stories/mock-provider/tasks.stories.js"],"sourcesContent":["// THIS FILE IS AUTO GENERATED\n// ANY CHANGES WILL BE LOST DURING BUILD\n// MODIFY THE .SCSS FILE INSTEAD\nimport { css } from 'lit-element';\n/**\n * exports lit-element css\n * @export styles\n */\nexport const styles = [\n    css `\n/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n:host([hidden]) {\n  display: none; }\n\n:host {\n  display: block;\n  --default-font-family: \"Segoe UI\", \"Segoe UI Web (West European)\", \"Segoe UI\",\n    -apple-system, BlinkMacSystemFont, Roboto, \"Helvetica Neue\", sans-serif;\n  --theme-primary-color: #0078d7;\n  --theme-dark-color: #005a9e; }\n\n.ms-Icon {\n  display: inline-block;\n  font-family: \"FabricMDL2Icons\";\n  font-style: normal;\n  font-weight: normal;\n  font-size: 16px;\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-font-smoothing: antialiased;\n  margin: 4px 0; }\n\n.ms-Icon--ChevronDown::before {\n  content: \"\\\\\\E70D\"; }\n\n.ms-Icon--ChevronUp::before {\n  content: \"\\\\\\E70E\"; }\n\n.ms-Icon--Contact::before {\n  content: \"\\\\\\E77B\"; }\n\n.ms-Icon--AddFriend::before {\n  content: \"\\\\\\E8FA\"; }\n\n.ms-Icon--OutlookLogoInverse::before {\n  content: \"\\\\\\EB6D\"; }\n\n/*\r\n  Your use of the content in the files referenced here is subject to the terms of the license at http://aka.ms/fabric-assets-license\r\n*/\nmgt-tasks,\n:host {\n  font-family: var(--default-font-family, \"Segoe UI\");\n  display: flex;\n  flex-direction: column; }\n\nmgt-tasks .TaskIcon,\n:host .TaskIcon {\n  font-family: 'FabricMDL2Icons';\n  text-align: center;\n  justify-self: center;\n  align-content: center;\n  align-self: center;\n  vertical-align: middle;\n  user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none; }\n\nmgt-tasks .Header,\n:host .Header {\n  padding: var(--tasks-header-padding, 0px 10px 0 10px);\n  margin: var(--tasks-header-margin, 0 0 10px 0); }\n\nmgt-tasks .TaskIcon.Divider,\n:host .TaskIcon.Divider {\n  vertical-align: initial;\n  margin: 0 12px;\n  font-size: 16px; }\n\nmgt-tasks .Header .PlannerTitle,\n:host .Header .PlannerTitle {\n  padding: var(--tasks-title-padding, 0px 0px 0px 0px);\n  display: flex;\n  align-items: center;\n  align-content: center; }\n\nmgt-tasks select,\n:host select {\n  font-family: var(--default-font-family, \"Segoe UI\");\n  border: none;\n  -moz-appearance: none;\n  -webkit-appearance: none;\n  cursor: pointer; }\n\nmgt-tasks select::-ms-expand,\n:host select::-ms-expand {\n  display: none; }\n\nmgt-tasks .PlannerTitle select,\n:host .PlannerTitle select,\nmgt-tasks .Header .PlannerTitle .PlanTitle,\n:host .Header .PlannerTitle .PlanTitle {\n  font-family: var(--default-font-family, \"Segoe UI\");\n  font-size: var(--tasks-plan-title-font-size, 1.1em);\n  padding: var(--tasks-plan-title-padding, 5px); }\n\nmgt-tasks .Header .AddBar,\n:host .Header .AddBar {\n  display: flex; }\n\nmgt-tasks .Header .AddBar .AddBarItem,\n:host .Header .AddBar .AddBarItem {\n  flex: 1 1 auto; }\n\nmgt-tasks .Header .NewTaskDue,\n:host .Header .NewTaskDue {\n  display: flex; }\n\nmgt-tasks .Header .NewTaskDue input,\n:host .Header .NewTaskDue input {\n  flex: 1 1 auto; }\n\nmgt-tasks .Header .TitleCont,\n:host .Header .TitleCont {\n  flex: 1 1 auto;\n  height: var(--tasks-new-button-height, 34px); }\n\nmgt-tasks .Header .NewTaskButton,\n:host .Header .NewTaskButton {\n  flex: 0 0 auto;\n  display: inline-block;\n  width: var(--task-new-button-width, 90px);\n  height: var(--tasks-new-button-height, 32px);\n  max-width: 90px;\n  min-width: 90px;\n  line-height: 200%;\n  text-align: center;\n  align-content: center;\n  align-self: center;\n  vertical-align: middle;\n  justify-self: flex-end;\n  background: var(--tasks-new-button-background, #0078d4);\n  border: var(--tasks-new-button-border, solid 1px rgba(0, 0, 0, 0));\n  color: var(--tasks-new-button-color, #ffffff);\n  user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  cursor: pointer; }\n\nmgt-tasks .Header .NewTaskButton:hover,\n:host .Header .NewTaskButton:hover {\n  background: var(--tasks-new-button-hover-background, #0091ff); }\n\nmgt-tasks .Header .NewTaskButton:active,\n:host .Header .NewTaskButton:active {\n  background: var(--tasks-new-button-active-background, #00508d); }\n\nmgt-tasks .Task,\n:host .Task {\n  margin: var(--task-margin, 0 10px 10px 10px);\n  padding: var(--task-padding, 0 0 0 0);\n  box-shadow: var(--task-box-shadow, 0px 2px 8px rgba(0, 0, 0, 0.092));\n  background: var(--task-background, #ffffff);\n  position: relative; }\n  mgt-tasks .Task .TaskContent,\n  :host .Task .TaskContent {\n    display: flex;\n    flex-direction: row; }\n    mgt-tasks .Task .TaskContent .TaskDetailsContainer,\n    :host .Task .TaskContent .TaskDetailsContainer {\n      color: var(--task-detail-color, #767676);\n      margin: 20px 0 18px 0;\n      display: flex;\n      flex-direction: column;\n      flex: 1 1 auto; }\n      mgt-tasks .Task .TaskContent .TaskDetailsContainer .TaskTitle,\n      :host .Task .TaskContent .TaskDetailsContainer .TaskTitle {\n        flex: 1 0 auto;\n        color: #333333;\n        max-width: 370px;\n        width: 100%;\n        font-size: 20px;\n        font-weight: 300; }\n      mgt-tasks .Task .TaskContent .TaskDetailsContainer .TaskDetails,\n      :host .Task .TaskContent .TaskDetailsContainer .TaskDetails {\n        display: flex;\n        margin: 10px 0 0 0;\n        font-size: 12px;\n        font-weight: 400;\n        align-items: center;\n        flex-wrap: wrap; }\n        mgt-tasks .Task .TaskContent .TaskDetailsContainer .TaskDetails svg,\n        :host .Task .TaskContent .TaskDetailsContainer .TaskDetails svg {\n          vertical-align: middle;\n          margin-right: 4px; }\n        mgt-tasks .Task .TaskContent .TaskDetailsContainer .TaskDetails span,\n        mgt-tasks .Task .TaskContent .TaskDetailsContainer .TaskDetails select,\n        :host .Task .TaskContent .TaskDetailsContainer .TaskDetails span,\n        :host .Task .TaskContent .TaskDetailsContainer .TaskDetails select {\n          vertical-align: middle; }\n        mgt-tasks .Task .TaskContent .TaskDetailsContainer .TaskDetails .TaskDetail,\n        :host .Task .TaskContent .TaskDetailsContainer .TaskDetails .TaskDetail {\n          margin: 0 20px 0 0; }\n        mgt-tasks .Task .TaskContent .TaskDetailsContainer .TaskDetails .TaskIcon,\n        :host .Task .TaskContent .TaskDetailsContainer .TaskDetails .TaskIcon {\n          color: #333333;\n          margin: var(--task-detail-icon-margin 0 8px 0 0); }\n        mgt-tasks .Task .TaskContent .TaskDetailsContainer .TaskDetails mgt-people,\n        :host .Task .TaskContent .TaskDetailsContainer .TaskDetails mgt-people {\n          color: var(--task-detail-color, black);\n          font-size: 16px; }\n        mgt-tasks .Task .TaskContent .TaskDetailsContainer .TaskDetails mgt-person,\n        :host .Task .TaskContent .TaskDetailsContainer .TaskDetails mgt-person {\n          display: inline-block; }\n        mgt-tasks .Task .TaskContent .TaskDetailsContainer .TaskDetails .Picker,\n        :host .Task .TaskContent .TaskDetailsContainer .TaskDetails .Picker {\n          background-color: white;\n          display: block;\n          position: absolute;\n          box-shadow: 0 3px 7px rgba(0, 0, 0, 0.3);\n          -webkit-background-clip: padding-box;\n          -moz-background-clip: padding-box;\n          background-clip: padding-box;\n          width: 450px;\n          color: var(--task-detail-color, black);\n          z-index: 1; }\n          mgt-tasks .Task .TaskContent .TaskDetailsContainer .TaskDetails .Picker mgt-people-picker,\n          :host .Task .TaskContent .TaskDetailsContainer .TaskDetails .Picker mgt-people-picker {\n            --separator-margin: 0px 10px 0px 10px; }\n          mgt-tasks .Task .TaskContent .TaskDetailsContainer .TaskDetails .Picker.Hidden,\n          :host .Task .TaskContent .TaskDetailsContainer .TaskDetails .Picker.Hidden {\n            display: none; }\n        mgt-tasks .Task .TaskContent .TaskDetailsContainer .TaskDetails input,\n        mgt-tasks .Task .TaskContent .TaskDetailsContainer .TaskDetails select,\n        :host .Task .TaskContent .TaskDetailsContainer .TaskDetails input,\n        :host .Task .TaskContent .TaskDetailsContainer .TaskDetails select {\n          color: var(--task-detail-color, #767676);\n          font-size: 0.9em; }\n  mgt-tasks .Task .TaskHeader,\n  :host .Task .TaskHeader {\n    display: flex;\n    justify-content: center;\n    color: var(--task-header-color, #333333);\n    margin: var(--task-header-margin, 0 0 0 10px); }\n  mgt-tasks .Task.ReadOnly .TaskCheckContainer,\n  :host .Task.ReadOnly .TaskCheckContainer {\n    cursor: default; }\n  mgt-tasks .Task.Complete,\n  :host .Task.Complete {\n    background: var(--task-complete-background, #f6f6f6);\n    border-color: var(--task-complete-border, #e2e2e2); }\n    mgt-tasks .Task.Complete .TaskHeader,\n    :host .Task.Complete .TaskHeader {\n      color: var(--task-complete-header-color, #959595); }\n    mgt-tasks .Task.Complete .TaskDetails,\n    :host .Task.Complete .TaskDetails {\n      color: var(--task-complete-detail-color #b0b0b0); }\n      mgt-tasks .Task.Complete .TaskDetails .TaskIcon,\n      :host .Task.Complete .TaskDetails .TaskIcon {\n        color: var(--task-compete-detail-icon-color, #959595); }\n  mgt-tasks .Task.NewTask,\n  :host .Task.NewTask {\n    margin: var(--task-new-margin, var(--task-margin, 0 10px 10px 10px));\n    display: flex;\n    flex-direction: row; }\n    mgt-tasks .Task.NewTask .SelfAssign,\n    :host .Task.NewTask .SelfAssign {\n      display: none; }\n    mgt-tasks .Task.NewTask .AssignTo,\n    :host .Task.NewTask .AssignTo {\n      border: 0;\n      background: none; }\n    mgt-tasks .Task.NewTask .FakeCheckBox,\n    :host .Task.NewTask .FakeCheckBox {\n      width: 15px;\n      height: 15px;\n      cursor: pointer;\n      margin: 0 5px 0 5px; }\n      mgt-tasks .Task.NewTask .FakeCheckBox::after,\n      :host .Task.NewTask .FakeCheckBox::after {\n        font-family: 'FabricMDL2Icons';\n        content: '\\uE739'; }\n      mgt-tasks .Task.NewTask .FakeCheckBox ~ :checked,\n      :host .Task.NewTask .FakeCheckBox ~ :checked {\n        font-family: 'FabricMDL2Icons';\n        content: '\\uE73A'; }\n    mgt-tasks .Task.NewTask .TaskContent,\n    :host .Task.NewTask .TaskContent {\n      flex: 1 1 auto;\n      align-content: center;\n      vertical-align: middle;\n      margin: 0 0 0 12px; }\n      mgt-tasks .Task.NewTask .TaskContent .TaskDetailsContainer,\n      :host .Task.NewTask .TaskContent .TaskDetailsContainer {\n        margin: 0; }\n        mgt-tasks .Task.NewTask .TaskContent .TaskDetailsContainer .TaskTitle,\n        :host .Task.NewTask .TaskContent .TaskDetailsContainer .TaskTitle {\n          max-width: none; }\n          mgt-tasks .Task.NewTask .TaskContent .TaskDetailsContainer .TaskTitle input,\n          :host .Task.NewTask .TaskContent .TaskDetailsContainer .TaskTitle input {\n            flex: 1 0 auto;\n            font-family: var(--default-font-family, \"Segoe UI\");\n            margin: var(--task-new-input-margin, 16px 0 0 0);\n            padding: var(--task-new-input-padding, 7px);\n            font-size: var(--task-new-input-font-size, 1em);\n            border: var(--task-new-border, none);\n            width: 100%; }\n          mgt-tasks .Task.NewTask .TaskContent .TaskDetailsContainer .TaskTitle input:active,\n          :host .Task.NewTask .TaskContent .TaskDetailsContainer .TaskTitle input:active {\n            border: var(--task-new-input-active-border, none); }\n        mgt-tasks .Task.NewTask .TaskContent .TaskDetailsContainer hr,\n        :host .Task.NewTask .TaskContent .TaskDetailsContainer hr {\n          border: var(--task-new-line-border, solid 1px #d8d8d8);\n          margin: 0; }\n        mgt-tasks .Task.NewTask .TaskContent .TaskDetailsContainer .TaskDetails,\n        :host .Task.NewTask .TaskContent .TaskDetailsContainer .TaskDetails {\n          flex: 1 0 auto;\n          margin: 14px 0 14px 4px; }\n          mgt-tasks .Task.NewTask .TaskContent .TaskDetailsContainer .TaskDetails .TaskPeople label,\n          :host .Task.NewTask .TaskContent .TaskDetailsContainer .TaskDetails .TaskPeople label {\n            display: flex;\n            align-content: center;\n            align-items: center; }\n          mgt-tasks .Task.NewTask .TaskContent .TaskDetailsContainer .TaskDetails select,\n          mgt-tasks .Task.NewTask .TaskContent .TaskDetailsContainer .TaskDetails input,\n          :host .Task.NewTask .TaskContent .TaskDetailsContainer .TaskDetails select,\n          :host .Task.NewTask .TaskContent .TaskDetailsContainer .TaskDetails input {\n            font-family: var(--default-font-family, \"Segoe UI\");\n            border: var(--task-new-select-border, none);\n            padding: 0 10px; }\n    mgt-tasks .Task.NewTask .TaskAddButtonContainer,\n    :host .Task.NewTask .TaskAddButtonContainer {\n      flex: 0 0 auto;\n      display: flex;\n      align-content: center;\n      align-items: center; }\n      mgt-tasks .Task.NewTask .TaskAddButtonContainer .TaskAdd,\n      mgt-tasks .Task.NewTask .TaskAddButtonContainer .TaskCancel,\n      :host .Task.NewTask .TaskAddButtonContainer .TaskAdd,\n      :host .Task.NewTask .TaskAddButtonContainer .TaskCancel {\n        height: 100%;\n        max-width: 50px;\n        min-width: 50px;\n        flex: 1 1 auto;\n        justify-content: center;\n        align-items: center;\n        display: flex;\n        cursor: pointer;\n        color: white; }\n      mgt-tasks .Task.NewTask .TaskAddButtonContainer .TaskAdd,\n      :host .Task.NewTask .TaskAddButtonContainer .TaskAdd {\n        background: var(--task-new-add-button-background, #0078d4); }\n      mgt-tasks .Task.NewTask .TaskAddButtonContainer .TaskCancel,\n      :host .Task.NewTask .TaskAddButtonContainer .TaskCancel {\n        font-family: var(--default-font-family, \"Segoe UI\");\n        color: var(--task-new-cancel-button-color, gray);\n        margin: 0px 20px 0px 32px; }\n      mgt-tasks .Task.NewTask .TaskAddButtonContainer.Disabled .TaskAdd,\n      :host .Task.NewTask .TaskAddButtonContainer.Disabled .TaskAdd {\n        background: var(--task-new-add-button-disabled-background, #eaeaea);\n        cursor: default; }\n  mgt-tasks .Task .TaskCheckContainer,\n  :host .Task .TaskCheckContainer {\n    font-family: 'FabricMDL2Icons';\n    display: inline-block;\n    width: 24px;\n    height: 24px;\n    text-align: center;\n    border-radius: 50%;\n    flex: 0 0 auto;\n    color: white;\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    align-content: center;\n    justify-items: center;\n    justify-content: center;\n    margin: 20px 10px 20px 20px;\n    user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none; }\n    mgt-tasks .Task .TaskCheckContainer.Complete .TaskCheck,\n    :host .Task .TaskCheckContainer.Complete .TaskCheck {\n      background: #00b294;\n      border-color: #00b294;\n      display: flex;\n      align-items: center;\n      align-content: center;\n      justify-items: center;\n      justify-content: center; }\n  mgt-tasks .Task .TaskCheck,\n  :host .Task .TaskCheck {\n    font-family: 'FabricMDL2Icons';\n    display: inline-block;\n    width: 22px;\n    height: 22px;\n    text-align: center;\n    border-radius: 50%;\n    border: solid 1px #666666;\n    flex: 0 0 auto;\n    color: white;\n    display: flex;\n    align-items: center;\n    align-content: center;\n    justify-items: center;\n    justify-content: center;\n    user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none; }\n    mgt-tasks .Task .TaskCheck.Loading,\n    :host .Task .TaskCheck.Loading {\n      color: black;\n      animation: rotateIcon 2s infinite linear; }\n  mgt-tasks .Task.LoadingTask .TaskCheckContainer,\n  :host .Task.LoadingTask .TaskCheckContainer {\n    cursor: default; }\n  mgt-tasks .Task.LoadingTask .TaskCheck,\n  :host .Task.LoadingTask .TaskCheck {\n    background: #f2f2f2;\n    border-color: #f2f2f2;\n    cursor: default; }\n  mgt-tasks .Task.LoadingTask .TaskHeader,\n  :host .Task.LoadingTask .TaskHeader {\n    justify-content: flex-start;\n    justify-items: flex-start; }\n  mgt-tasks .Task.LoadingTask .TaskDetailIcon,\n  :host .Task.LoadingTask .TaskDetailIcon {\n    width: 16px;\n    height: 16px;\n    margin: 5px;\n    background: #f2f2f2; }\n  mgt-tasks .Task.LoadingTask .TaskTitle,\n  :host .Task.LoadingTask .TaskTitle {\n    background: #f2f2f2;\n    height: 20px; }\n  mgt-tasks .Task.LoadingTask .TaskDetail,\n  :host .Task.LoadingTask .TaskDetail {\n    margin-right: 8px;\n    display: flex;\n    flex-direction: row;\n    align-items: center; }\n  mgt-tasks .Task.LoadingTask .TaskDetailName,\n  :host .Task.LoadingTask .TaskDetailName {\n    width: 81px;\n    height: 10px;\n    background: #f2f2f2; }\n  mgt-tasks .Task .TaskOptions,\n  :host .Task .TaskOptions {\n    cursor: pointer;\n    user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    position: absolute;\n    top: 0;\n    right: 0; }\n\nmgt-tasks .LoadingHeader,\n:host .LoadingHeader {\n  max-width: 90px;\n  width: 100%;\n  height: 20px;\n  background: #f2f2f2; }\n\n@keyframes rotateIcon {\n  from {\n    transform: rotate(0deg); }\n  to {\n    transform: rotate(360deg); } }\n\n`\n];\n//# sourceMappingURL=mgt-tasks-css.js.map","/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n/**\n * async method to get user details\n *\n * @class TaskSourceBase\n */\nclass TaskSourceBase {\n    constructor(graph) {\n        this.graph = graph;\n    }\n}\n/**\n * Create Planner\n *\n * @export\n * @class PlannerTaskSource\n * @extends {TaskSourceBase}\n * @implements {ITaskSource}\n */\n// tslint:disable-next-line: max-classes-per-file\nexport class PlannerTaskSource extends TaskSourceBase {\n    /**\n     * returns promise with all of users plans\n     *\n     * @returns {Promise<ITaskGroup[]>}\n     * @memberof PlannerTaskSource\n     */\n    getTaskGroups() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const plans = yield this.graph.planner_getAllMyPlans();\n            return plans.map(plan => ({ id: plan.id, title: plan.title }));\n        });\n    }\n    /**\n     * returns promise with all of plans for group id\n     *\n     * @param {string} id\n     * @returns {Promise<ITaskGroup[]>}\n     * @memberof PlannerTaskSource\n     */\n    getTaskGroupsForGroup(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const plans = yield this.graph.getPlansForGroup(id);\n            return plans.map(plan => ({ id: plan.id, title: plan.title }));\n        });\n    }\n    /**\n     * returns promise single TaskGroup or plan from plan.id\n     *\n     * @param {string} id\n     * @returns {Promise<ITaskGroup>}\n     * @memberof PlannerTaskSource\n     */\n    getTaskGroup(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const plan = yield this.graph.planner_getSinglePlan(id);\n            return { id: plan.id, title: plan.title, _raw: plan };\n        });\n    }\n    /**\n     * returns promise with Bucket for a plan from bucket.id\n     *\n     * @param {string} id\n     * @returns {Promise<ITaskFolder[]>}\n     * @memberof PlannerTaskSource\n     */\n    getTaskFoldersForTaskGroup(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const buckets = yield this.graph.planner_getBucketsForPlan(id);\n            return buckets.map(bucket => ({\n                _raw: bucket,\n                id: bucket.id,\n                name: bucket.name,\n                parentId: bucket.planId\n            }));\n        });\n    }\n    /**\n     * get all task from a Bucket given task id\n     *\n     * @param {string} id\n     * @returns {Promise<ITask[]>}\n     * @memberof PlannerTaskSource\n     */\n    getTasksForTaskFolder(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const tasks = yield this.graph.planner_getTasksForBucket(id);\n            return tasks.map(task => ({\n                _raw: task,\n                assignments: task.assignments,\n                completed: task.percentComplete === 100,\n                dueDate: task.dueDateTime && new Date(task.dueDateTime),\n                eTag: task['@odata.etag'],\n                id: task.id,\n                immediateParentId: task.bucketId,\n                name: task.title,\n                topParentId: task.planId\n            }));\n        });\n    }\n    /**\n     * set task in planner to complete state by id\n     *\n     * @param {string} id\n     * @param {string} eTag\n     * @returns {Promise<any>}\n     * @memberof PlannerTaskSource\n     */\n    setTaskComplete(id, eTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.graph.planner_setTaskComplete(id, eTag);\n        });\n    }\n    /**\n     * set task in planner to incomplete state by id\n     *\n     * @param {string} id\n     * @param {string} eTag\n     * @returns {Promise<any>}\n     * @memberof PlannerTaskSource\n     */\n    setTaskIncomplete(id, eTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.graph.planner_setTaskIncomplete(id, eTag);\n        });\n    }\n    /**\n     * add new task to bucket\n     *\n     * @param {ITask} newTask\n     * @returns {Promise<any>}\n     * @memberof PlannerTaskSource\n     */\n    addTask(newTask) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.graph.planner_addTask({\n                assignments: newTask.assignments,\n                bucketId: newTask.immediateParentId,\n                dueDateTime: newTask.dueDate && newTask.dueDate.toISOString(),\n                planId: newTask.topParentId,\n                title: newTask.name\n            });\n        });\n    }\n    /**\n     * Assigns people to task\n     *\n     * @param {string} id\n     * @param {string} eTag\n     * @param {*} people\n     * @returns {Promise<any>}\n     * @memberof PlannerTaskSource\n     */\n    assignPeopleToTask(id, eTag, people) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.graph.planner_assignPeopleToTask(id, eTag, people);\n        });\n    }\n    /**\n     * remove task from bucket\n     *\n     * @param {string} id\n     * @param {string} eTag\n     * @returns {Promise<any>}\n     * @memberof PlannerTaskSource\n     */\n    removeTask(id, eTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.graph.planner_removeTask(id, eTag);\n        });\n    }\n    /**\n     * assigns task to the signed in user\n     *\n     * @param {ITask} task\n     * @param {string} myId\n     * @returns {boolean}\n     * @memberof PlannerTaskSource\n     */\n    isAssignedToMe(task, myId) {\n        const keys = Object.keys(task.assignments);\n        return keys.includes(myId);\n    }\n}\n/**\n * determins outlook task group for data source\n *\n * @export\n * @class TodoTaskSource\n * @extends {TaskSourceBase}\n * @implements {ITaskSource}\n */\n// tslint:disable-next-line: max-classes-per-file\nexport class TodoTaskSource extends TaskSourceBase {\n    /**\n     * get all Outlook task groups\n     *\n     * @returns {Promise<ITaskGroup[]>}\n     * @memberof TodoTaskSource\n     */\n    getTaskGroups() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const groups = yield this.graph.todo_getAllMyGroups();\n            return groups.map(group => ({\n                _raw: group,\n                id: group.id,\n                secondaryId: group.groupKey,\n                title: group.name\n            }));\n        });\n    }\n    /**\n     * get a single OutlookTaskGroup from id\n     *\n     * @param {string} id\n     * @returns {Promise<ITaskGroup>}\n     * @memberof TodoTaskSource\n     */\n    getTaskGroup(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const group = yield this.graph.todo_getSingleGroup(id);\n            return { id: group.id, secondaryId: group.groupKey, title: group.name, _raw: group };\n        });\n    }\n    /**\n     * get all OutlookTaskFolder for group by id\n     *\n     * @param {string} id\n     * @returns {Promise<ITaskFolder[]>}\n     * @memberof TodoTaskSource\n     */\n    getTaskFoldersForTaskGroup(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const folders = yield this.graph.todo_getFoldersForGroup(id);\n            return folders.map(folder => ({\n                _raw: folder,\n                id: folder.id,\n                name: folder.name,\n                parentId: id\n            }));\n        });\n    }\n    /**\n     * gets all tasks for OutLook Task Folder by id\n     *\n     * @param {string} id\n     * @param {string} parId\n     * @returns {Promise<ITask[]>}\n     * @memberof TodoTaskSource\n     */\n    getTasksForTaskFolder(id, parId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const tasks = yield this.graph.todo_getAllTasksForFolder(id);\n            return tasks.map(task => ({\n                _raw: task,\n                assignments: {},\n                completed: !!task.completedDateTime,\n                dueDate: task.dueDateTime && new Date(task.dueDateTime.dateTime + 'Z'),\n                eTag: task['@odata.etag'],\n                id: task.id,\n                immediateParentId: id,\n                name: task.subject,\n                topParentId: parId\n            }));\n        });\n    }\n    /**\n     * set task in planner to complete state by id\n     *\n     * @param {string} id\n     * @param {string} eTag\n     * @returns {Promise<any>}\n     * @memberof TodoTaskSource\n     */\n    setTaskComplete(id, eTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.graph.todo_setTaskComplete(id, eTag);\n        });\n    }\n    /**\n     * Assigns people to task\n     *\n     * @param {string} id\n     * @param {string} eTag\n     * @param {*} people\n     * @returns {Promise<any>}\n     * @memberof PlannerTaskSource\n     */\n    assignPeopleToTask(id, eTag, people) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.graph.planner_assignPeopleToTask(id, eTag, people);\n        });\n    }\n    /**\n     * set task in planner to incomplete state by id\n     *\n     * @param {string} id\n     * @param {string} eTag\n     * @returns {Promise<any>}\n     * @memberof TodoTaskSource\n     */\n    setTaskIncomplete(id, eTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.graph.todo_setTaskIncomplete(id, eTag);\n        });\n    }\n    /**\n     * add new task to planner\n     *\n     * @param {ITask} newTask\n     * @returns {Promise<any>}\n     * @memberof TodoTaskSource\n     */\n    addTask(newTask) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const task = {\n                parentFolderId: newTask.immediateParentId,\n                subject: newTask.name\n            };\n            if (newTask.dueDate) {\n                task.dueDateTime = {\n                    dateTime: newTask.dueDate.toISOString(),\n                    timeZone: 'UTC'\n                };\n            }\n            return yield this.graph.todo_addTask(task);\n        });\n    }\n    /**\n     * remove task from planner by id\n     *\n     * @param {string} id\n     * @param {string} eTag\n     * @returns {Promise<any>}\n     * @memberof TodoTaskSource\n     */\n    removeTask(id, eTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.graph.todo_removeTask(id, eTag);\n        });\n    }\n    /**\n     * if task is assigned in to user logged in\n     *\n     * @param {ITask} task\n     * @param {string} myId\n     * @returns {boolean}\n     * @memberof TodoTaskSource\n     */\n    isAssignedToMe(task, myId) {\n        return true;\n    }\n    /**\n     * returns promise with all of plans for group id\n     *\n     * @param {string} id\n     * @returns {Promise<ITaskGroup[]>}\n     * @memberof PlannerTaskSource\n     */\n    getTaskGroupsForGroup(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return undefined;\n        });\n    }\n}\n//# sourceMappingURL=task-sources.js.map","// THIS FILE IS AUTO GENERATED\n// ANY CHANGES WILL BE LOST DURING BUILD\n// MODIFY THE .SCSS FILE INSTEAD\nimport { css } from 'lit-element';\n/**\n * exports lit-element css\n * @export styles\n */\nexport const styles = [\n    css `\n/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n:host,\nmgt-arrow-options {\n  position: relative;\n  font-family: 'Segoe UI';\n  margin: 0 0 12px 0; }\n\n:host .ArrowIcon,\nmgt-arrow-options .ArrowIcon {\n  font-family: 'FabricMDL2Icons';\n  margin: 0 0 0 20px;\n  user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none; }\n\n:host .Header,\nmgt-arrow-options .Header {\n  cursor: pointer; }\n\n:host .Header:hover,\nmgt-arrow-options .Header:hover {\n  color: var(--theme-primary-color);\n  background-color: var(--background-color--hover); }\n\n:host .Menu,\nmgt-arrow-options .Menu {\n  position: absolute;\n  left: 0;\n  box-shadow: rgba(0, 0, 0, 0.08) 0px 0px 40px 5px;\n  background: #ffffff;\n  z-index: 1;\n  display: none;\n  color: black;\n  white-space: nowrap; }\n\n:host .Menu.Open,\nmgt-arrow-options .Menu.Open {\n  display: block; }\n\n:host .MenuOption,\nmgt-arrow-options .MenuOption {\n  padding: 20px;\n  cursor: pointer;\n  user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  display: flex;\n  align-items: center;\n  justify-content: stretch;\n  justify-items: stretch; }\n\n:host .MenuOption:first,\nmgt-arrow-options .MenuOption:first {\n  padding: 12px 20px 20px 20px; }\n\n:host .MenuOption:hover,\nmgt-arrow-options .MenuOption:hover {\n  background: #c0c0c0; }\n\n:host .MenuOption:active,\nmgt-arrow-options .MenuOption:active {\n  background: #d8d8d8; }\n\n:host .MenuOptionCheck,\nmgt-arrow-options .MenuOptionCheck {\n  font-family: 'FabricMDL2Icons';\n  color: rgba(0, 0, 0, 0);\n  margin-right: 10px; }\n\n:host .MenuOptionCheck.CurrentValue,\nmgt-arrow-options .MenuOptionCheck.CurrentValue {\n  color: #0078d4; }\n\n`\n];\n//# sourceMappingURL=mgt-arrow-options-css.js.map","/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { customElement, html, property } from 'lit-element';\nimport { classMap } from 'lit-html/directives/class-map';\nimport { MgtBaseComponent } from '../../baseComponent';\nimport { styles } from './mgt-arrow-options-css';\n/*\n  Ok, the name here deserves a bit of explanation,\n  This component originally had a built-in arrow icon,\n  The problem came when you wanted to use a different symbol,\n  So the arrow was removed, but the name was already set everywhere.\n  - benotter\n */\n/**\n * Custom Component used to handle an arrow rendering for TaskGroups utilized in the task component.\n *\n * @export MgtArrowOptions\n * @class MgtArrowOptions\n * @extends {MgtBaseComponent}\n */\nlet MgtArrowOptions = class MgtArrowOptions extends MgtBaseComponent {\n    constructor() {\n        super();\n        /**\n         * Determines if header menu is rendered or hidden.\n         *\n         * @type {boolean}\n         * @memberof MgtArrowOptions\n         */\n        this.open = false;\n        /**\n         * Title of chosen TaskGroup.\n         *\n         * @type {string}\n         * @memberof MgtArrowOptions\n         */\n        this.value = '';\n        /**\n         * Menu options to be rendered with an attached MouseEvent handler for expansion of details\n         *\n         * @type {object}\n         * @memberof MgtArrowOptions\n         */\n        this.options = {};\n        this._clickHandler = (e) => (this.open = false);\n    }\n    /**\n     * Array of styles to apply to the element. The styles should be defined\n     * user the `css` tag function.\n     */\n    static get styles() {\n        return styles;\n    }\n    // tslint:disable-next-line: completed-docs\n    connectedCallback() {\n        super.connectedCallback();\n        window.addEventListener('click', this._clickHandler);\n    }\n    // tslint:disable-next-line: completed-docs\n    disconnectedCallback() {\n        window.removeEventListener('click', this._clickHandler);\n        super.disconnectedCallback();\n    }\n    /**\n     * Handles clicking for header menu, utilizing boolean switch open\n     *\n     * @param {MouseEvent} e attaches to Header to open menu\n     * @memberof MgtArrowOptions\n     */\n    onHeaderClick(e) {\n        const keys = Object.keys(this.options);\n        if (keys.length > 1) {\n            e.preventDefault();\n            e.stopPropagation();\n            this.open = !this.open;\n        }\n    }\n    /**\n     * Invoked on each update to perform rendering tasks. This method must return\n     * a lit-html TemplateResult. Setting properties inside this method will *not*\n     * trigger the element to update.\n     */\n    render() {\n        return html `\n      <span class=\"Header\" @click=${e => this.onHeaderClick(e)}>\n        <span class=\"CurrentValue\">${this.value}</span>\n      </span>\n      <div class=${classMap({ Menu: true, Open: this.open, Closed: !this.open })}>\n        ${this.getMenuOptions()}\n      </div>\n    `;\n    }\n    getMenuOptions() {\n        const keys = Object.keys(this.options);\n        const funcs = this.options;\n        return keys.map(opt => html `\n        <div\n          class=\"MenuOption\"\n          @click=\"${(e) => {\n            this.open = false;\n            funcs[opt](e);\n        }}\"\n        >\n          <span class=${classMap({ MenuOptionCheck: true, CurrentValue: this.value === opt })}>\n            \\uE73E\n          </span>\n          <span class=\"MenuOptionName\">${opt}</span>\n        </div>\n      `);\n    }\n};\n__decorate([\n    property({ type: Boolean })\n], MgtArrowOptions.prototype, \"open\", void 0);\n__decorate([\n    property({ type: String })\n], MgtArrowOptions.prototype, \"value\", void 0);\n__decorate([\n    property({ type: Object })\n], MgtArrowOptions.prototype, \"options\", void 0);\nMgtArrowOptions = __decorate([\n    customElement('mgt-arrow-options')\n], MgtArrowOptions);\nexport { MgtArrowOptions };\n//# sourceMappingURL=mgt-arrow-options.js.map","// THIS FILE IS AUTO GENERATED\n// ANY CHANGES WILL BE LOST DURING BUILD\n// MODIFY THE .SCSS FILE INSTEAD\nimport { css } from 'lit-element';\n/**\n * exports lit-element css\n * @export styles\n */\nexport const styles = [\n    css `\n/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n:host([hidden]) {\n  display: none; }\n\n:host {\n  display: block;\n  --default-font-family: \"Segoe UI\", \"Segoe UI Web (West European)\", \"Segoe UI\",\n    -apple-system, BlinkMacSystemFont, Roboto, \"Helvetica Neue\", sans-serif;\n  --theme-primary-color: #0078d7;\n  --theme-dark-color: #005a9e; }\n\n.ms-Icon {\n  display: inline-block;\n  font-family: \"FabricMDL2Icons\";\n  font-style: normal;\n  font-weight: normal;\n  font-size: 16px;\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-font-smoothing: antialiased;\n  margin: 4px 0; }\n\n.ms-Icon--ChevronDown::before {\n  content: \"\\\\\\E70D\"; }\n\n.ms-Icon--ChevronUp::before {\n  content: \"\\\\\\E70E\"; }\n\n.ms-Icon--Contact::before {\n  content: \"\\\\\\E77B\"; }\n\n.ms-Icon--AddFriend::before {\n  content: \"\\\\\\E8FA\"; }\n\n.ms-Icon--OutlookLogoInverse::before {\n  content: \"\\\\\\EB6D\"; }\n\n/*\r\n  Your use of the content in the files referenced here is subject to the terms of the license at http://aka.ms/fabric-assets-license\r\n*/\n:host,\nmgt-dot-options {\n  font-family: 'Segoe UI'; }\n\n:host .DotIcon,\nmgt-dot-options .DotIcon {\n  display: inline-block;\n  font-family: 'FabricMDL2Icons';\n  min-width: 40px;\n  min-height: 30px;\n  text-align: center;\n  line-height: 30px; }\n\n:host .Menu,\nmgt-dot-options .Menu {\n  position: absolute;\n  box-shadow: rgba(0, 0, 0, 0.08) 0px 0px 40px 5px;\n  background: #ffffff;\n  z-index: 1;\n  display: none;\n  color: black;\n  white-space: nowrap;\n  transform: translateX(-50px); }\n\n:host .DotMenu.Open .Menu,\nmgt-dot-options .DotMenu.Open .Menu {\n  display: block; }\n\n:host .DotMenu .DotItem,\nmgt-dot-options .DotMenu .DotItem {\n  direction: ltr;\n  text-align: left;\n  padding: 10px 10px 8px 10px; }\n\n:host .DotMenu .DotItem:hover,\nmgt-dot-options .DotMenu .DotItem:hover {\n  background: #c0c0c0; }\n\n:host .DotMenu .DotItem:active,\nmgt-dot-options .DotMenu .DotItem:active {\n  background: #d8d8d8; }\n\n:host .DotMenu .DotItemName,\nmgt-dot-options .DotMenu .DotItemName {\n  direction: rtl; }\n\n`\n];\n//# sourceMappingURL=mgt-dot-options-css.js.map","/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { customElement, html, property } from 'lit-element';\nimport { classMap } from 'lit-html/directives/class-map';\nimport { MgtBaseComponent } from '../../baseComponent';\nimport { styles } from './mgt-dot-options-css';\n/**\n * Custom Component used to handle an arrow rendering for TaskGroups utilized in the task component.\n *\n * @export MgtDotOptions\n * @class MgtDotOptions\n * @extends {MgtBaseComponent}\n */\nlet MgtDotOptions = class MgtDotOptions extends MgtBaseComponent {\n    constructor() {\n        super();\n        /**\n         * Determines if header menu is rendered or hidden.\n         *\n         * @type {boolean}\n         * @memberof MgtDotOptions\n         */\n        this.open = false;\n        /**\n         * Menu options to be rendered with an attached MouseEvent handler for expansion of details\n         *\n         * @memberof MgtDotOptions\n         */\n        this.options = null;\n        this._clickHandler = null;\n        this._clickHandler = (e) => (this.open = false);\n    }\n    /**\n     * Array of styles to apply to the element. The styles should be defined\n     * user the `css` tag function.\n     */\n    static get styles() {\n        return styles;\n    }\n    // tslint:disable-next-line: completed-docs\n    connectedCallback() {\n        super.connectedCallback();\n        window.addEventListener('click', this._clickHandler);\n    }\n    // tslint:disable-next-line: completed-docs\n    disconnectedCallback() {\n        window.removeEventListener('click', this._clickHandler);\n        super.disconnectedCallback();\n    }\n    /**\n     * Invoked on each update to perform rendering tasks. This method must return\n     * a lit-html TemplateResult. Setting properties inside this method will *not*\n     * trigger the element to update.\n     */\n    render() {\n        return html `\n      <div class=${classMap({ DotMenu: true, Open: this.open })} @click=${e => this.onDotClick(e)}>\n        <span class=\"DotIcon\">\\uE712</span>\n        <div class=\"Menu\">\n          ${Object.keys(this.options).map(prop => this.getMenuOption(prop, this.options[prop]))}\n        </div>\n      </div>\n    `;\n    }\n    /**\n     * Used by the render method to attach click handler to each dot item\n     *\n     * @param {string} name\n     * @param {((e: MouseEvent) => void | any)} click\n     * @returns\n     * @memberof MgtDotOptions\n     */\n    getMenuOption(name, click) {\n        return html `\n      <div\n        class=\"DotItem\"\n        @click=\"${e => {\n            e.preventDefault();\n            e.stopPropagation();\n            click(e);\n            this.open = false;\n        }}\"\n      >\n        <span class=\"DotItemName\">\n          ${name}\n        </span>\n      </div>\n    `;\n    }\n    onDotClick(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        this.open = !this.open;\n    }\n};\n__decorate([\n    property({ type: Boolean })\n], MgtDotOptions.prototype, \"open\", void 0);\n__decorate([\n    property({ type: Object })\n], MgtDotOptions.prototype, \"options\", void 0);\nMgtDotOptions = __decorate([\n    customElement('mgt-dot-options')\n], MgtDotOptions);\nexport { MgtDotOptions };\n//# sourceMappingURL=mgt-dot-options.js.map","/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { customElement, html, property } from 'lit-element';\nimport { classMap } from 'lit-html/directives/class-map';\nimport { repeat } from 'lit-html/directives/repeat';\nimport { Providers } from '../../Providers';\nimport { ProviderState } from '../../providers/IProvider';\nimport { getShortDateString } from '../../utils/Utils';\nimport { MgtTemplatedComponent } from '../templatedComponent';\nimport { PersonCardInteraction } from './../PersonCardInteraction';\nimport { styles } from './mgt-tasks-css';\nimport { PlannerTaskSource, TodoTaskSource } from './task-sources';\nimport '../mgt-person/mgt-person';\nimport '../sub-components/mgt-arrow-options/mgt-arrow-options';\nimport '../sub-components/mgt-dot-options/mgt-dot-options';\n/**\n * Defines how a person card is shown when a user interacts with\n * a person component\n *\n * @export\n * @enum {number}\n */\nexport var TasksSource;\n(function (TasksSource) {\n    /**\n     * Use Microsoft Planner\n     */\n    TasksSource[TasksSource[\"planner\"] = 0] = \"planner\";\n    /**\n     * Use Microsoft To-Do\n     */\n    TasksSource[TasksSource[\"todo\"] = 1] = \"todo\";\n})(TasksSource || (TasksSource = {}));\n// Strings and Resources for different task contexts\n// tslint:disable-next-line: completed-docs\nconst TASK_RES = {\n    todo: {\n        BASE_SELF_ASSIGNED: 'All Tasks',\n        BUCKETS_SELF_ASSIGNED: 'All Tasks',\n        BUCKET_NOT_FOUND: 'Folder not found',\n        PLANS_SELF_ASSIGNED: 'All groups',\n        PLAN_NOT_FOUND: 'Group not found'\n    },\n    // tslint:disable-next-line: object-literal-sort-keys\n    planner: {\n        BASE_SELF_ASSIGNED: 'Assigned to Me',\n        BUCKETS_SELF_ASSIGNED: 'All Tasks',\n        BUCKET_NOT_FOUND: 'Bucket not found',\n        PLANS_SELF_ASSIGNED: 'All Plans',\n        PLAN_NOT_FOUND: 'Plan not found'\n    }\n};\n// tslint:disable-next-line: completed-docs\nconst plannerAssignment = {\n    '@odata.type': 'microsoft.graph.plannerAssignment',\n    orderHint: 'string !'\n};\n/**\n * component enables the user to view, add, remove, complete, or edit tasks. It works with tasks in Microsoft Planner or Microsoft To-Do.\n *\n * @export\n * @class MgtTasks\n * @extends {MgtBaseComponent}\n */\nlet MgtTasks = class MgtTasks extends MgtTemplatedComponent {\n    constructor() {\n        super();\n        /**\n         * determines if tasks are un-editable\n         * @type {boolean}\n         */\n        this.readOnly = false;\n        /**\n         * determines which task source is loaded, either planner or todo\n         * @type {string}\n         */\n        this.dataSource = TasksSource.planner;\n        /**\n         * if set, the component will only show tasks from either this plan or group\n         * @type {string}\n         */\n        this.targetId = null;\n        /**\n         * if set, the component will only show tasks from this bucket or folder\n         * @type {string}\n         */\n        this.targetBucketId = null;\n        /**\n         * if set, the component will first show tasks from this plan or group\n         *\n         * @type {string}\n         * @memberof MgtTasks\n         */\n        this.initialId = null;\n        /**\n         * if set, the component will first show tasks from this bucket or folder\n         *\n         * @type {string}\n         * @memberof MgtTasks\n         */\n        this.initialBucketId = null;\n        /**\n         * sets whether the header is rendered\n         *\n         * @type {boolean}\n         * @memberof MgtTasks\n         */\n        this.hideHeader = false;\n        /**\n         * allows developer to define specific group id\n         */\n        this.groupId = null;\n        this._isNewTaskVisible = false;\n        this._newTaskBeingAdded = false;\n        this._newTaskName = '';\n        this._newTaskDueDate = null;\n        this._newTaskGroupId = '';\n        this._newTaskFolderId = '';\n        this._groups = [];\n        this._folders = [];\n        this._tasks = [];\n        this._hiddenTasks = [];\n        this._loadingTasks = [];\n        this._inTaskLoad = false;\n        this._hasDoneInitialLoad = false;\n        this._todoDefaultSet = false;\n        this.isPeoplePickerVisible = false;\n        this._me = null;\n        this.providerUpdateCallback = () => this.loadTasks();\n        this.handleWindowClick = () => this.hidePeoplePicker();\n    }\n    /**\n     * determines whether todo, or planner functionality for task component\n     *\n     * @readonly\n     * @memberof MgtTasks\n     */\n    get res() {\n        switch (this.dataSource) {\n            case TasksSource.todo:\n                return TASK_RES.todo;\n            case TasksSource.planner:\n            default:\n                return TASK_RES.planner;\n        }\n    }\n    /**\n     * Array of styles to apply to the element. The styles should be defined\n     * using the `css` tag function.\n     */\n    static get styles() {\n        return styles;\n    }\n    /**\n     * Get whether new task view is visible\n     *\n     * @memberof MgtTasks\n     */\n    get isNewTaskVisible() {\n        return this._isNewTaskVisible;\n    }\n    /**\n     * Set whether new task is visible\n     *\n     * @memberof MgtTasks\n     */\n    set isNewTaskVisible(value) {\n        this._isNewTaskVisible = value;\n        if (!value) {\n            this._newTaskDueDate = null;\n            this._newTaskName = '';\n            this._newTaskGroupId = '';\n        }\n    }\n    /**\n     * updates provider state\n     *\n     * @memberof MgtTasks\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        Providers.onProviderUpdated(this.providerUpdateCallback);\n        window.addEventListener('click', this.handleWindowClick);\n    }\n    /**\n     * removes updates on provider state\n     *\n     * @memberof MgtTasks\n     */\n    disconnectedCallback() {\n        Providers.removeProviderUpdatedListener(this.providerUpdateCallback);\n        window.removeEventListener('click', this.handleWindowClick);\n        super.disconnectedCallback();\n    }\n    /**\n     * Synchronizes property values when attributes change.\n     *\n     * @param {*} name\n     * @param {*} oldValue\n     * @param {*} newValue\n     * @memberof MgtTasks\n     */\n    attributeChangedCallback(name, oldVal, newVal) {\n        super.attributeChangedCallback(name, oldVal, newVal);\n        if (name === 'data-source') {\n            if (this.dataSource === TasksSource.planner) {\n                this._currentGroup = this.initialId;\n                this._currentFolder = this.initialBucketId;\n            }\n            else if (this.dataSource === TasksSource.todo) {\n                this._currentGroup = null;\n                this._currentFolder = this.initialId;\n            }\n            this._newTaskFolderId = '';\n            this._newTaskGroupId = '';\n            this._newTaskDueDate = null;\n            this._newTaskName = '';\n            this._newTaskBeingAdded = false;\n            this._tasks = [];\n            this._folders = [];\n            this._groups = [];\n            this._hasDoneInitialLoad = false;\n            this._inTaskLoad = false;\n            this._todoDefaultSet = false;\n            this.loadTasks();\n        }\n    }\n    /**\n     * Invoked when the element is first updated. Implement to perform one time\n     * work on the element after update.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    firstUpdated() {\n        if (this.initialId && !this._currentGroup) {\n            if (this.dataSource === TasksSource.planner) {\n                this._currentGroup = this.initialId;\n            }\n            else if (this.dataSource === TasksSource.todo) {\n                this._currentFolder = this.initialId;\n            }\n        }\n        if (this.dataSource === TasksSource.planner && this.initialBucketId && !this._currentFolder) {\n            this._currentFolder = this.initialBucketId;\n        }\n        this.loadTasks();\n    }\n    /**\n     * Invoked on each update to perform rendering tasks. This method must return\n     * a lit-html TemplateResult. Setting properties inside this method will *not*\n     * trigger the element to update.\n     */\n    render() {\n        const tasks = this._tasks\n            .filter(task => this.isTaskInSelectedGroupFilter(task))\n            .filter(task => this.isTaskInSelectedFolderFilter(task))\n            .filter(task => !this._hiddenTasks.includes(task.id));\n        const loadingTask = this._inTaskLoad && !this._hasDoneInitialLoad ? this.renderLoadingTask() : null;\n        let header;\n        if (!this.hideHeader) {\n            header = html `\n        <div class=\"Header\">\n          <span class=\"PlannerTitle\">\n            ${this.renderPlanOptions()}\n          </span>\n        </div>\n      `;\n        }\n        return html `\n      ${header}\n      <div class=\"Tasks\">\n        ${this._isNewTaskVisible ? this.renderNewTask() : null} ${loadingTask}\n        ${repeat(tasks, task => task.id, task => this.renderTask(task))}\n      </div>\n    `;\n    }\n    /**\n     * loads tasks from dataSource\n     *\n     * @returns\n     * @memberof MgtTasks\n     */\n    loadTasks() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const ts = this.getTaskSource();\n            if (!ts) {\n                return;\n            }\n            const provider = Providers.globalProvider;\n            if (!provider || provider.state !== ProviderState.SignedIn) {\n                return;\n            }\n            this._inTaskLoad = true;\n            let meTask;\n            if (!this._me) {\n                meTask = provider.graph.getMe();\n            }\n            if (this.groupId && this.dataSource === TasksSource.planner) {\n                yield this._loadTasksForGroup(ts);\n            }\n            else if (this.targetId) {\n                if (this.dataSource === TasksSource.todo) {\n                    yield this._loadTargetTodoTasks(ts);\n                }\n                else {\n                    yield this._loadTargetPlannerTasks(ts);\n                }\n            }\n            else {\n                yield this._loadAllTasks(ts);\n            }\n            if (meTask) {\n                this._me = yield meTask;\n            }\n            this._inTaskLoad = false;\n            this._hasDoneInitialLoad = true;\n        });\n    }\n    _loadTargetTodoTasks(ts) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const groups = yield ts.getTaskGroups();\n            const folders = (yield Promise.all(groups.map(group => ts.getTaskFoldersForTaskGroup(group.id)))).reduce((cur, ret) => [...cur, ...ret], []);\n            const tasks = (yield Promise.all(folders.map(folder => ts.getTasksForTaskFolder(folder.id, folder.parentId)))).reduce((cur, ret) => [...cur, ...ret], []);\n            this._tasks = tasks;\n            this._folders = folders;\n            this._groups = groups;\n            this._currentGroup = null;\n        });\n    }\n    _loadTargetPlannerTasks(ts) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const group = yield ts.getTaskGroup(this.targetId);\n            let folders = yield ts.getTaskFoldersForTaskGroup(group.id);\n            if (this.targetBucketId) {\n                folders = folders.filter(folder => folder.id === this.targetBucketId);\n            }\n            const tasks = (yield Promise.all(folders.map(folder => ts.getTasksForTaskFolder(folder.id, folder.parentId)))).reduce((cur, ret) => [...cur, ...ret], []);\n            this._tasks = tasks;\n            this._folders = folders;\n            this._groups = [group];\n        });\n    }\n    _loadAllTasks(ts) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const groups = yield ts.getTaskGroups();\n            const folders = (yield Promise.all(groups.map(group => ts.getTaskFoldersForTaskGroup(group.id)))).reduce((cur, ret) => [...cur, ...ret], []);\n            if (!this.initialId && this.dataSource === TasksSource.todo && !this._todoDefaultSet) {\n                this._todoDefaultSet = true;\n                const defaultFolder = folders.find(d => d._raw.isDefaultFolder);\n                if (defaultFolder) {\n                    this._currentFolder = defaultFolder.id;\n                }\n            }\n            const tasks = (yield Promise.all(folders.map(folder => ts.getTasksForTaskFolder(folder.id, folder.parentId)))).reduce((cur, ret) => [...cur, ...ret], []);\n            this._tasks = tasks;\n            this._folders = folders;\n            this._groups = groups;\n        });\n    }\n    _loadTasksForGroup(ts) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const groups = yield ts.getTaskGroupsForGroup(this.groupId);\n            const folders = (yield Promise.all(groups.map(group => ts.getTaskFoldersForTaskGroup(group.id)))).reduce((cur, ret) => [...cur, ...ret], []);\n            const tasks = (yield Promise.all(folders.map(folder => ts.getTasksForTaskFolder(folder.id, folder.parentId)))).reduce((cur, ret) => [...cur, ...ret], []);\n            this._tasks = tasks;\n            this._folders = folders;\n            this._groups = groups;\n        });\n    }\n    addTask(name, dueDate, topParentId, immediateParentId, assignments = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const ts = this.getTaskSource();\n            if (!ts) {\n                return;\n            }\n            const newTask = {\n                assignments,\n                dueDate,\n                immediateParentId,\n                name,\n                topParentId\n            };\n            this._newTaskBeingAdded = true;\n            yield ts.addTask(newTask);\n            yield this.loadTasks();\n            this._newTaskBeingAdded = false;\n            this.isNewTaskVisible = false;\n        });\n    }\n    completeTask(task) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const ts = this.getTaskSource();\n            if (!ts) {\n                return;\n            }\n            this._loadingTasks = [...this._loadingTasks, task.id];\n            yield ts.setTaskComplete(task.id, task.eTag);\n            yield this.loadTasks();\n            this._loadingTasks = this._loadingTasks.filter(id => id !== task.id);\n        });\n    }\n    uncompleteTask(task) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const ts = this.getTaskSource();\n            if (!ts) {\n                return;\n            }\n            this._loadingTasks = [...this._loadingTasks, task.id];\n            yield ts.setTaskIncomplete(task.id, task.eTag);\n            yield this.loadTasks();\n            this._loadingTasks = this._loadingTasks.filter(id => id !== task.id);\n        });\n    }\n    removeTask(task) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const ts = this.getTaskSource();\n            if (!ts) {\n                return;\n            }\n            this._hiddenTasks = [...this._hiddenTasks, task.id];\n            yield ts.removeTask(task.id, task.eTag);\n            yield this.loadTasks();\n            this._hiddenTasks = this._hiddenTasks.filter(id => id !== task.id);\n        });\n    }\n    assignPeople(task, people) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const ts = this.getTaskSource();\n            if (!ts) {\n                return;\n            }\n            // create previously selected people Object\n            let savedSelectedPeople = [];\n            if (task) {\n                if (task.assignments) {\n                    savedSelectedPeople = Object.keys(task.assignments).sort();\n                }\n            }\n            const newPeopleIds = people.map(person => {\n                return person.id;\n            });\n            // new people from people picker\n            const isEqual = newPeopleIds.length === savedSelectedPeople.length &&\n                newPeopleIds.sort().every((value, index) => {\n                    return value === savedSelectedPeople[index];\n                });\n            if (isEqual) {\n                return;\n            }\n            const peopleObj = {};\n            if (people.length === 0) {\n                // tslint:disable-next-line: prefer-for-of\n                for (let i = 0; i < savedSelectedPeople.length; i++) {\n                    peopleObj[savedSelectedPeople[i]] = null;\n                }\n            }\n            if (people) {\n                // tslint:disable-next-line: prefer-for-of\n                for (let i = 0; i < savedSelectedPeople.length; i++) {\n                    // tslint:disable-next-line: prefer-for-of\n                    for (let j = 0; j < people.length; j++) {\n                        if (savedSelectedPeople[i] !== people[j].id) {\n                            peopleObj[savedSelectedPeople[i]] = null;\n                            break;\n                        }\n                        else {\n                            peopleObj[savedSelectedPeople[i]] = plannerAssignment;\n                        }\n                    }\n                }\n                // tslint:disable-next-line: prefer-for-of\n                for (let i = 0; i < people.length; i++) {\n                    peopleObj[people[i].id] = plannerAssignment;\n                }\n            }\n            if (task) {\n                this._loadingTasks = [...this._loadingTasks, task.id];\n                yield ts.assignPeopleToTask(task.id, peopleObj, task.eTag);\n                yield this.loadTasks();\n                this._loadingTasks = this._loadingTasks.filter(id => id !== task.id);\n            }\n        });\n    }\n    onAddTaskClick(e) {\n        const picker = this.getPeoplePicker(null);\n        const peopleObj = {};\n        if (picker) {\n            for (const person of picker.selectedPeople) {\n                if (picker.selectedPeople.length) {\n                    peopleObj[person.id] = plannerAssignment;\n                }\n            }\n        }\n        if (!this._newTaskBeingAdded && this._newTaskName && (this._currentGroup || this._newTaskGroupId)) {\n            this.addTask(this._newTaskName, this._newTaskDueDate, !this._currentGroup ? this._newTaskGroupId : this._currentGroup, !this._currentFolder ? this._newTaskFolderId : this._currentFolder, peopleObj);\n        }\n    }\n    renderPlanOptions() {\n        const p = Providers.globalProvider;\n        if (!p || p.state !== ProviderState.SignedIn) {\n            return null;\n        }\n        if (this._inTaskLoad && !this._hasDoneInitialLoad) {\n            return html `\n        <span class=\"LoadingHeader\"></span>\n      `;\n        }\n        const addButton = this.readOnly || this._isNewTaskVisible\n            ? null\n            : html `\n            <span\n              class=\"AddBarItem NewTaskButton\"\n              @click=\"${() => {\n                this.isNewTaskVisible = !this.isNewTaskVisible;\n            }}\"\n            >\n              <span class=\"TaskIcon\">\\uE710</span>\n              <span>Add</span>\n            </span>\n          `;\n        if (this.dataSource === TasksSource.planner) {\n            const currentGroup = this._groups.find(d => d.id === this._currentGroup) || {\n                title: this.res.BASE_SELF_ASSIGNED\n            };\n            const groupOptions = {\n                [this.res.BASE_SELF_ASSIGNED]: e => {\n                    this._currentGroup = null;\n                    this._currentFolder = null;\n                }\n            };\n            for (const group of this._groups) {\n                groupOptions[group.title] = e => {\n                    this._currentGroup = group.id;\n                    this._currentFolder = null;\n                };\n            }\n            const groupSelect = html `\n        <mgt-arrow-options .options=\"${groupOptions}\" .value=\"${currentGroup.title}\"></mgt-arrow-options>\n      `;\n            const divider = !this._currentGroup\n                ? null\n                : html `\n            <span class=\"TaskIcon Divider\">/</span>\n          `;\n            const currentFolder = this._folders.find(d => d.id === this._currentFolder) || {\n                name: this.res.BUCKETS_SELF_ASSIGNED\n            };\n            const folderOptions = {\n                [this.res.BUCKETS_SELF_ASSIGNED]: e => {\n                    this._currentFolder = null;\n                }\n            };\n            for (const folder of this._folders.filter(d => d.parentId === this._currentGroup)) {\n                folderOptions[folder.name] = e => {\n                    this._currentFolder = folder.id;\n                };\n            }\n            const folderSelect = this.targetBucketId\n                ? html `\n            <span class=\"PlanTitle\">\n              ${this._folders[0] && this._folders[0].name}\n            </span>\n          `\n                : html `\n            <mgt-arrow-options .options=\"${folderOptions}\" .value=\"${currentFolder.name}\"></mgt-arrow-options>\n          `;\n            return html `\n        <span class=\"TitleCont\">\n          ${groupSelect} ${divider} ${!this._currentGroup ? null : folderSelect}\n        </span>\n        ${addButton}\n      `;\n        }\n        else {\n            const folder = this._folders.find(d => d.id === this.targetId) || { name: this.res.BUCKETS_SELF_ASSIGNED };\n            const currentFolder = this._folders.find(d => d.id === this._currentFolder) || {\n                name: this.res.BUCKETS_SELF_ASSIGNED\n            };\n            const folderOptions = {};\n            for (const d of this._folders) {\n                folderOptions[d.name] = () => {\n                    this._currentFolder = d.id;\n                };\n            }\n            folderOptions[this.res.BUCKETS_SELF_ASSIGNED] = e => {\n                this._currentFolder = null;\n            };\n            const folderSelect = this.targetId\n                ? html `\n            <span class=\"PlanTitle\">\n              ${folder.name}\n            </span>\n          `\n                : html `\n            <mgt-arrow-options .value=\"${currentFolder.name}\" .options=\"${folderOptions}\"></mgt-arrow-options>\n          `;\n            return html `\n        <span class=\"TitleCont\">\n          ${folderSelect}\n        </span>\n        ${addButton}\n      `;\n        }\n    }\n    renderNewTask() {\n        const taskTitle = html `\n      <input\n        type=\"text\"\n        placeholder=\"Task...\"\n        .value=\"${this._newTaskName}\"\n        label=\"new-taskName-input\"\n        aria-label=\"new-taskName-input\"\n        role=\"input\"\n        @input=\"${(e) => {\n            this._newTaskName = e.target.value;\n        }}\"\n      />\n    `;\n        const groups = this._groups;\n        if (groups.length > 0 && !this._newTaskGroupId) {\n            this._newTaskGroupId = groups[0].id;\n        }\n        const group = this.dataSource === TasksSource.todo\n            ? null\n            : this._currentGroup\n                ? html `\n            <span class=\"TaskDetail TaskAssignee\">\n              ${this.renderPlannerIcon()}\n              <span>${this.getPlanTitle(this._currentGroup)}</span>\n            </span>\n          `\n                : html `\n            <span class=\"TaskDetail TaskAssignee\">\n              ${this.renderPlannerIcon()}\n              <select\n                .value=\"${this._newTaskGroupId}\"\n                @change=\"${(e) => {\n                    this._newTaskGroupId = e.target.value;\n                }}\"\n              >\n                ${this._groups.map(plan => html `\n                    <option value=\"${plan.id}\">${plan.title}</option>\n                  `)}\n              </select>\n            </span>\n          `;\n        const folders = this._folders.filter(folder => (this._currentGroup && folder.parentId === this._currentGroup) ||\n            (!this._currentGroup && folder.parentId === this._newTaskGroupId));\n        if (folders.length > 0 && !this._newTaskFolderId) {\n            this._newTaskFolderId = folders[0].id;\n        }\n        const taskFolder = this._currentFolder\n            ? html `\n          <span class=\"TaskDetail TaskBucket\">\n            ${this.renderBucketIcon()}\n            <span>${this.getFolderName(this._currentFolder)}</span>\n          </span>\n        `\n            : html `\n          <span class=\"TaskDetail TaskBucket\">\n            ${this.renderBucketIcon()}\n            <select\n              .value=\"${this._newTaskFolderId}\"\n              @change=\"${(e) => {\n                this._newTaskFolderId = e.target.value;\n            }}\"\n            >\n              ${folders.map(folder => html `\n                  <option value=\"${folder.id}\">${folder.name}</option>\n                `)}\n            </select>\n          </span>\n        `;\n        const taskDue = html `\n      <span class=\"TaskDetail TaskDue\">\n        ${this.renderCalendarIcon()}\n        <input\n          type=\"date\"\n          label=\"new-taskDate-input\"\n          aria-label=\"new-taskDate-input\"\n          role=\"input\"\n          .value=\"${this.dateToInputValue(this._newTaskDueDate)}\"\n          @change=\"${(e) => {\n            const value = e.target.value;\n            if (value) {\n                this._newTaskDueDate = new Date(value + 'T17:00');\n            }\n            else {\n                this._newTaskDueDate = null;\n            }\n        }}\"\n        />\n      </span>\n    `;\n        const task = null;\n        const assignedPeopleHTML = html `\n      <mgt-people\n        class=\"people-newTask\"\n        .userIds=\"${[]}\"\n        .personCardInteraction=${this.isPeoplePickerVisible ? PersonCardInteraction.none : PersonCardInteraction.hover}\n      >\n        <template data-type=\"no-people\">\n          <i class=\"login-icon ms-Icon ms-Icon--Contact\"></i>\n        </template>\n      </mgt-people>\n    `;\n        const taskPeople = this.dataSource === TasksSource.todo\n            ? null\n            : html `\n            <span class=\"TaskDetail TaskPeople\">\n              <span\n                @click=${(e) => {\n                e.stopPropagation();\n                this.showPeoplePicker(task);\n            }}\n              >\n                ${assignedPeopleHTML}\n                <div\n                  class=${classMap({ Picker: true, Hidden: !this.isPeoplePickerVisible || task !== this._currentTask })}\n                >\n                  <mgt-people-picker\n                    class=\"picker-newTask\"\n                    @click=${(e) => e.stopPropagation()}\n                  ></mgt-people-picker>\n                </div>\n              </span>\n            </span>\n          `;\n        const taskAdd = this._newTaskBeingAdded\n            ? html `\n          <div class=\"TaskAddButtonContainer\"></div>\n        `\n            : html `\n          <div class=\"TaskAddButtonContainer ${this._newTaskName === '' ? 'Disabled' : ''}\">\n            <div class=\"TaskIcon TaskCancel\" @click=\"${() => (this.isNewTaskVisible = false)}\">\n              <span>Cancel</span>\n            </div>\n            <div class=\"TaskIcon TaskAdd\" @click=\"${this.onAddTaskClick}\">\n              <span>\\uE710</span>\n            </div>\n          </div>\n        `;\n        return html `\n      <div class=\"Task NewTask Incomplete\">\n        <div class=\"TaskContent\">\n          <div class=\"TaskDetailsContainer\">\n            <div class=\"TaskTitle\">\n              ${taskTitle}\n            </div>\n            <hr />\n            <div class=\"TaskDetails\">\n              ${group} ${taskFolder} ${taskPeople} ${taskDue}\n            </div>\n          </div>\n        </div>\n        ${taskAdd}\n      </div>\n    `;\n    }\n    showPeoplePicker(task) {\n        if (this.isPeoplePickerVisible) {\n            const isCurrentTask = task === this._currentTask;\n            if (isCurrentTask) {\n                this.hidePeoplePicker();\n                return;\n            }\n        }\n        this._currentTask = task;\n        this.isPeoplePickerVisible = true;\n        // logic for already created tasks\n        const picker = this.getPeoplePicker(task);\n        const mgtPeople = this.getMgtPeople(task);\n        if (picker && mgtPeople) {\n            picker.selectedPeople = mgtPeople.people;\n            setTimeout(() => {\n                picker.focus();\n            }, 50);\n        }\n    }\n    hidePeoplePicker() {\n        const picker = this.getPeoplePicker(this._currentTask);\n        const mgtPeople = this.getMgtPeople(this._currentTask);\n        if (picker) {\n            mgtPeople.people = picker.selectedPeople;\n            this.assignPeople(this._currentTask, picker.selectedPeople);\n        }\n        this.isPeoplePickerVisible = false;\n        this._currentTask = null;\n    }\n    getPeoplePicker(task) {\n        const taskId = task ? task.id : 'newTask';\n        const picker = this.renderRoot.querySelector(`.picker-${taskId}`);\n        return picker;\n    }\n    getMgtPeople(task) {\n        const taskId = task ? task.id : 'newTask';\n        const mgtPeople = this.renderRoot.querySelector(`.people-${taskId}`);\n        return mgtPeople;\n    }\n    renderTask(task) {\n        const { name = 'Task', completed = false, dueDate, assignments } = task;\n        const people = Object.keys(assignments);\n        const isLoading = this._loadingTasks.includes(task.id);\n        const taskCheckClasses = {\n            Complete: !isLoading && completed,\n            Loading: isLoading,\n            TaskCheck: true,\n            TaskIcon: true\n        };\n        const taskCheckContent = isLoading\n            ? html `\n          \\uF16A\n        `\n            : completed\n                ? html `\n          \\uE73E\n        `\n                : null;\n        const taskCheck = html `\n      <span class=${classMap(taskCheckClasses)}>${taskCheckContent}</span>\n    `;\n        const groupTitle = this._currentGroup ? null : this.getPlanTitle(task.topParentId);\n        const folderTitle = this._currentFolder ? null : this.getFolderName(task.immediateParentId);\n        const context = { task: Object.assign(Object.assign({}, task), { groupTitle, folderTitle }) };\n        const taskTemplate = this.renderTemplate('task', context, task.id);\n        if (taskTemplate) {\n            return taskTemplate;\n        }\n        let taskDetails = this.renderTemplate('task-details', context, `task-details-${task.id}`);\n        if (!taskDetails) {\n            const group = this.dataSource === TasksSource.todo || this._currentGroup\n                ? null\n                : html `\n              <span class=\"TaskDetail TaskAssignee\">\n                ${this.renderPlannerIcon()}\n                <span>${this.getPlanTitle(task.topParentId)}</span>\n              </span>\n            `;\n            const folder = this._currentFolder\n                ? null\n                : html `\n            <span class=\"TaskDetail TaskBucket\">\n              ${this.renderBucketIcon()}\n              <span>${this.getFolderName(task.immediateParentId)}</span>\n            </span>\n          `;\n            const taskDue = !dueDate\n                ? null\n                : html `\n            <span class=\"TaskDetail TaskDue\">\n              ${this.renderCalendarIcon()}\n              <span>${getShortDateString(dueDate)}</span>\n            </span>\n          `;\n            let taskPeople = null;\n            let assignedPeopleHTML = null;\n            const assignedPeople = Object.keys(assignments).map(key => {\n                return key;\n            });\n            const noPeopleTemplate = html `\n        <template data-type=\"no-people\">\n          <i class=\"login-icon ms-Icon ms-Icon--Contact\"></i>\n        </template>\n      `;\n            if (this.dataSource !== TasksSource.todo) {\n                assignedPeopleHTML = html `\n          <mgt-people\n            class=\"people-${task.id}\"\n            .userIds=\"${assignedPeople}\"\n            .personCardInteraction=${this.isPeoplePickerVisible\n                    ? PersonCardInteraction.none\n                    : PersonCardInteraction.hover}\n            >${noPeopleTemplate}\n          </mgt-people>\n        `;\n                taskPeople = html `\n          <span\n            class=\"TaskDetail TaskBucket\"\n            @click=${(e) => {\n                    this.showPeoplePicker(task);\n                    e.stopPropagation();\n                }}\n          >\n            ${assignedPeopleHTML}\n            <div class=${classMap({ Picker: true, Hidden: !this.showPeoplePicker || task !== this._currentTask })}>\n              <mgt-people-picker\n                class=\"picker-${task.id}\"\n                @click=${(e) => e.stopPropagation()}\n              ></mgt-people-picker>\n            </div>\n          </span>\n        `;\n            }\n            taskDetails = html `\n        <div class=\"TaskTitle\">\n          ${name}\n        </div>\n        <div class=\"TaskDetails\">\n          ${group} ${folder} ${taskPeople} ${taskDue}\n        </div>\n      `;\n        }\n        const taskOptions = this.readOnly\n            ? null\n            : html `\n          <div class=\"TaskOptions\">\n            <mgt-dot-options\n              .options=\"${{\n                'Delete Task': () => this.removeTask(task)\n            }}\"\n            ></mgt-dot-options>\n          </div>\n        `;\n        return html `\n      <div\n        class=${classMap({\n            Complete: completed,\n            Incomplete: !completed,\n            ReadOnly: this.readOnly,\n            Task: true\n        })}\n      >\n        <div\n          class=\"TaskContent\"\n          @click=${() => {\n            this.handleTaskClick(task);\n        }}\n        >\n          <span\n            class=${classMap({\n            Complete: completed,\n            Incomplete: !completed,\n            TaskCheckContainer: true\n        })}\n            @click=\"${e => {\n            if (!this.readOnly) {\n                if (!task.completed) {\n                    this.completeTask(task);\n                }\n                else {\n                    this.uncompleteTask(task);\n                }\n                e.stopPropagation();\n                e.preventDefault();\n            }\n        }}\"\n          >\n            ${taskCheck}\n          </span>\n          <div class=\"TaskDetailsContainer\">\n            ${taskDetails}\n          </div>\n        </div>\n        ${taskOptions}\n      </div>\n    `;\n    }\n    handleTaskClick(task) {\n        if (task && !this.isPeoplePickerVisible) {\n            this.fireCustomEvent('taskClick', { task: task._raw });\n        }\n    }\n    renderLoadingTask() {\n        return html `\n      <div class=\"Task LoadingTask\">\n        <div class=\"TaskContent\">\n          <div class=\"TaskCheckContainer\">\n            <div class=\"TaskCheck\"></div>\n          </div>\n          <div class=\"TaskDetailsContainer\">\n            <div class=\"TaskTitle\"></div>\n            <div class=\"TaskDetails\">\n              <span class=\"TaskDetail\">\n                <div class=\"TaskDetailIcon\"></div>\n                <div class=\"TaskDetailName\"></div>\n              </span>\n              <span class=\"TaskDetail\">\n                <div class=\"TaskDetailIcon\"></div>\n                <div class=\"TaskDetailName\"></div>\n              </span>\n              <span class=\"TaskDetail\">\n                <div class=\"TaskDetailIcon\"></div>\n                <div class=\"TaskDetailName\"></div>\n              </span>\n              <span class=\"TaskDetail\">\n                <div class=\"TaskDetailIcon\"></div>\n                <div class=\"TaskDetailName\"></div>\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n    }\n    renderPlannerIcon() {\n        return html `\n      <svg width=\"16\" height=\"18\" viewBox=\"0 0 16 18\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path\n          fill-rule=\"evenodd\"\n          clip-rule=\"evenodd\"\n          d=\"M7.223 1.156C6.98 1.26 6.769 1.404 6.586 1.586C6.403 1.768 6.261 1.98 6.157 2.223C6.052 2.465 6 2.724 6 3H2V17H14V3H10C10 2.724 9.948 2.465 9.844 2.223C9.74 1.98 9.596 1.768 9.414 1.586C9.231 1.404 9.02 1.26 8.777 1.156C8.535 1.053 8.276 1 8 1C7.723 1 7.465 1.053 7.223 1.156ZM5 4H7V3C7 2.86 7.026 2.729 7.078 2.609C7.13 2.49 7.202 2.385 7.293 2.293C7.384 2.202 7.49 2.131 7.609 2.079C7.73 2.026 7.859 2 8 2C8.14 2 8.271 2.026 8.39 2.079C8.511 2.131 8.616 2.202 8.707 2.293C8.798 2.385 8.87 2.49 8.922 2.609C8.974 2.729 9 2.86 9 3V4H11V5H5V4ZM12 6V4H13V16H3V4H4V6H12Z\"\n          fill=\"#3C3C3C\"\n        />\n        <path\n          fill-rule=\"evenodd\"\n          clip-rule=\"evenodd\"\n          d=\"M7.35156 12.3517L5.49956 14.2037L4.14856 12.8517L4.85156 12.1487L5.49956 12.7967L6.64856 11.6487L7.35156 12.3517Z\"\n          fill=\"#3C3C3C\"\n        />\n        <path\n          fill-rule=\"evenodd\"\n          clip-rule=\"evenodd\"\n          d=\"M7.35156 8.35168L5.49956 10.2037L4.14856 8.85168L4.85156 8.14868L5.49956 8.79668L6.64856 7.64868L7.35156 8.35168Z\"\n          fill=\"#3C3C3C\"\n        />\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M8 14H12.001V13H8V14Z\" fill=\"#3C3C3C\" />\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M8 10H12.001V9H8V10Z\" fill=\"#3C3C3C\" />\n      </svg>\n    `;\n    }\n    renderBucketIcon() {\n        return html `\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path\n          fill-rule=\"evenodd\"\n          clip-rule=\"evenodd\"\n          d=\"M14 2H2V4H3H5H6H10H11H13H14V2ZM10 5H6V6H10V5ZM5 5H3V14H13V5H11V6C11 6.55228 10.5523 7 10 7H6C5.44772 7 5 6.55228 5 6V5ZM1 5H2V14V15H3H13H14V14V5H15V4V2V1H14H2H1V2V4V5Z\"\n          fill=\"#3C3C3C\"\n        />\n      </svg>\n    `;\n    }\n    renderCalendarIcon() {\n        return html `\n      <svg width=\"20\" height=\"18\" viewBox=\"0 0 20 18\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path\n          d=\"M12 7H11V8H12V7ZM9 13H8V14H9V13ZM6 7H5V8H6V7ZM9 7H8V8H9V7ZM12 9H11V10H12V9ZM15 9H14V10H15V9ZM6 9H5V10H6V9ZM9 9H8V10H9V9ZM12 11H11V12H12V11ZM15 11H14V12H15V11ZM6 11H5V12H6V11ZM9 11H8V12H9V11ZM12 13H11V14H12V13ZM15 13H14V14H15V13ZM2 2V16H18V2H15V1H14V2H6V1H5V2H2ZM17 3V5H3V3H5V4H6V3H14V4H15V3H17ZM3 15V6H17V15H3Z\"\n          fill=\"#3C3C3C\"\n        />\n      </svg>\n    `;\n    }\n    getTaskSource() {\n        const p = Providers.globalProvider;\n        if (!p || p.state !== ProviderState.SignedIn) {\n            return null;\n        }\n        if (this.dataSource === TasksSource.planner) {\n            return new PlannerTaskSource(p.graph);\n        }\n        else if (this.dataSource === TasksSource.todo) {\n            return new TodoTaskSource(p.graph);\n        }\n        else {\n            return null;\n        }\n    }\n    getPlanTitle(planId) {\n        if (!planId) {\n            return this.res.BASE_SELF_ASSIGNED;\n        }\n        else if (planId === this.res.PLANS_SELF_ASSIGNED) {\n            return this.res.PLANS_SELF_ASSIGNED;\n        }\n        else {\n            return (this._groups.find(plan => plan.id === planId) || {\n                title: this.res.PLAN_NOT_FOUND\n            }).title;\n        }\n    }\n    getFolderName(bucketId) {\n        if (!bucketId) {\n            return this.res.BUCKETS_SELF_ASSIGNED;\n        }\n        return (this._folders.find(buck => buck.id === bucketId) || {\n            name: this.res.BUCKET_NOT_FOUND\n        }).name;\n    }\n    isTaskInSelectedGroupFilter(task) {\n        return (task.topParentId === this._currentGroup ||\n            (!this._currentGroup && this.getTaskSource().isAssignedToMe(task, this._me.id)));\n    }\n    isTaskInSelectedFolderFilter(task) {\n        return task.immediateParentId === this._currentFolder || !this._currentFolder;\n    }\n    dateToInputValue(date) {\n        if (date) {\n            return new Date(date.getTime() - date.getTimezoneOffset() * 60000).toISOString().split('T')[0];\n        }\n        return null;\n    }\n};\n__decorate([\n    property({ attribute: 'read-only', type: Boolean })\n], MgtTasks.prototype, \"readOnly\", void 0);\n__decorate([\n    property({\n        attribute: 'data-source',\n        converter: (value, type) => {\n            value = value.toLowerCase();\n            return TasksSource[value] || TasksSource.planner;\n        }\n    })\n], MgtTasks.prototype, \"dataSource\", void 0);\n__decorate([\n    property({ attribute: 'target-id', type: String })\n], MgtTasks.prototype, \"targetId\", void 0);\n__decorate([\n    property({ attribute: 'target-bucket-id', type: String })\n], MgtTasks.prototype, \"targetBucketId\", void 0);\n__decorate([\n    property({ attribute: 'initial-id', type: String })\n], MgtTasks.prototype, \"initialId\", void 0);\n__decorate([\n    property({ attribute: 'initial-bucket-id', type: String })\n], MgtTasks.prototype, \"initialBucketId\", void 0);\n__decorate([\n    property({ attribute: 'hide-header', type: Boolean })\n], MgtTasks.prototype, \"hideHeader\", void 0);\n__decorate([\n    property({ attribute: 'group-id', type: String })\n], MgtTasks.prototype, \"groupId\", void 0);\n__decorate([\n    property()\n], MgtTasks.prototype, \"_isNewTaskVisible\", void 0);\n__decorate([\n    property()\n], MgtTasks.prototype, \"_newTaskBeingAdded\", void 0);\n__decorate([\n    property()\n], MgtTasks.prototype, \"_newTaskName\", void 0);\n__decorate([\n    property()\n], MgtTasks.prototype, \"_newTaskDueDate\", void 0);\n__decorate([\n    property()\n], MgtTasks.prototype, \"_newTaskGroupId\", void 0);\n__decorate([\n    property()\n], MgtTasks.prototype, \"_newTaskFolderId\", void 0);\n__decorate([\n    property()\n], MgtTasks.prototype, \"_groups\", void 0);\n__decorate([\n    property()\n], MgtTasks.prototype, \"_folders\", void 0);\n__decorate([\n    property()\n], MgtTasks.prototype, \"_tasks\", void 0);\n__decorate([\n    property()\n], MgtTasks.prototype, \"_hiddenTasks\", void 0);\n__decorate([\n    property()\n], MgtTasks.prototype, \"_loadingTasks\", void 0);\n__decorate([\n    property()\n], MgtTasks.prototype, \"_inTaskLoad\", void 0);\n__decorate([\n    property()\n], MgtTasks.prototype, \"_hasDoneInitialLoad\", void 0);\n__decorate([\n    property()\n], MgtTasks.prototype, \"_todoDefaultSet\", void 0);\n__decorate([\n    property()\n], MgtTasks.prototype, \"_currentGroup\", void 0);\n__decorate([\n    property()\n], MgtTasks.prototype, \"_currentFolder\", void 0);\n__decorate([\n    property()\n], MgtTasks.prototype, \"_currentTask\", void 0);\n__decorate([\n    property()\n], MgtTasks.prototype, \"isPeoplePickerVisible\", void 0);\nMgtTasks = __decorate([\n    customElement('mgt-tasks')\n], MgtTasks);\nexport { MgtTasks };\n//# sourceMappingURL=mgt-tasks.js.map","import { html } from 'lit-element';\nimport { withKnobs, withWebComponentsKnobs } from '@open-wc/demoing-storybook';\nimport '../../dist/es6/components/mgt-tasks/mgt-tasks';\nimport '../../dist/es6/mock/mgt-mock-provider';\nimport '../../dist/es6/mock/MockProvider';\n\nexport default {\n  title: 'Mock Provider|mgt-tasks',\n  component: 'mgt-tasks',\n  decorators: [withKnobs, withWebComponentsKnobs]\n};\n\nexport const tasks = () => html`\n  <mgt-mock-provider></mgt-mock-provider>\n  <mgt-tasks></mgt-tasks>\n`;\n"],"names":["styles","css","TaskSourceBase","[object Object]","graph","PlannerTaskSource","this","planner_getAllMyPlans","map","plan","id","title","getPlansForGroup","planner_getSinglePlan","_raw","planner_getBucketsForPlan","bucket","name","parentId","planId","planner_getTasksForBucket","task","assignments","completed","percentComplete","dueDate","dueDateTime","Date","eTag","immediateParentId","bucketId","topParentId","planner_setTaskComplete","planner_setTaskIncomplete","newTask","planner_addTask","toISOString","people","planner_assignPeopleToTask","planner_removeTask","myId","Object","keys","includes","TodoTaskSource","todo_getAllMyGroups","group","secondaryId","groupKey","todo_getSingleGroup","todo_getFoldersForGroup","folder","parId","todo_getAllTasksForFolder","completedDateTime","dateTime","subject","todo_setTaskComplete","todo_setTaskIncomplete","parentFolderId","timeZone","todo_addTask","todo_removeTask","MgtArrowOptions","MgtBaseComponent","open","value","options","_clickHandler","e","connectedCallback","window","addEventListener","removeEventListener","disconnectedCallback","length","preventDefault","stopPropagation","html","onHeaderClick","classMap","Menu","Open","Closed","getMenuOptions","funcs","opt","MenuOptionCheck","CurrentValue","__decorate","property","type","Boolean","String","customElement","MgtDotOptions","DotMenu","onDotClick","prop","getMenuOption","click","TasksSource","TASK_RES","BASE_SELF_ASSIGNED","BUCKETS_SELF_ASSIGNED","BUCKET_NOT_FOUND","PLANS_SELF_ASSIGNED","PLAN_NOT_FOUND","plannerAssignment","orderHint","MgtTasks","MgtTemplatedComponent","readOnly","dataSource","planner","targetId","targetBucketId","initialId","initialBucketId","hideHeader","groupId","_isNewTaskVisible","_newTaskBeingAdded","_newTaskName","_newTaskDueDate","_newTaskGroupId","_newTaskFolderId","_groups","_folders","_tasks","_hiddenTasks","_loadingTasks","_inTaskLoad","_hasDoneInitialLoad","_todoDefaultSet","isPeoplePickerVisible","_me","providerUpdateCallback","loadTasks","handleWindowClick","hidePeoplePicker","todo","Providers","onProviderUpdated","removeProviderUpdatedListener","oldVal","newVal","attributeChangedCallback","_currentGroup","_currentFolder","tasks","filter","isTaskInSelectedGroupFilter","isTaskInSelectedFolderFilter","loadingTask","renderLoadingTask","header","renderPlanOptions","renderNewTask","repeat","renderTask","ts","getTaskSource","provider","globalProvider","state","ProviderState","SignedIn","meTask","getMe","_loadTasksForGroup","_loadTargetTodoTasks","_loadTargetPlannerTasks","_loadAllTasks","groups","getTaskGroups","folders","Promise","all","getTaskFoldersForTaskGroup","reduce","cur","ret","getTasksForTaskFolder","getTaskGroup","defaultFolder","find","d","isDefaultFolder","getTaskGroupsForGroup","addTask","isNewTaskVisible","setTaskComplete","setTaskIncomplete","removeTask","savedSelectedPeople","sort","newPeopleIds","person","every","index","peopleObj","i","j","assignPeopleToTask","picker","getPeoplePicker","selectedPeople","p","addButton","currentGroup","res","groupOptions","groupSelect","divider","currentFolder","folderOptions","folderSelect","taskTitle","target","renderPlannerIcon","getPlanTitle","taskFolder","renderBucketIcon","getFolderName","taskDue","renderCalendarIcon","dateToInputValue","assignedPeopleHTML","PersonCardInteraction","none","hover","taskPeople","showPeoplePicker","Picker","Hidden","_currentTask","taskAdd","onAddTaskClick","mgtPeople","getMgtPeople","setTimeout","focus","assignPeople","taskId","renderRoot","querySelector","isLoading","taskCheckContent","taskCheck","Complete","Loading","TaskCheck","TaskIcon","groupTitle","folderTitle","context","assign","taskTemplate","renderTemplate","taskDetails","getShortDateString","assignedPeople","key","noPeopleTemplate","taskOptions","Incomplete","ReadOnly","Task","handleTaskClick","TaskCheckContainer","uncompleteTask","completeTask","fireCustomEvent","buck","isAssignedToMe","date","getTime","getTimezoneOffset","split","attribute","converter","toLowerCase","component","decorators","withKnobs","withWebComponentsKnobs"],"mappings":"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"}